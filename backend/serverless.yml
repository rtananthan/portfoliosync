service: portfoliosync-backend

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.11
  region: ${opt:region, 'ap-southeast-2'}
  stage: ${opt:stage, 'dev'}
  
  memorySize: 256
  timeout: 30
  
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    PORTFOLIOS_TABLE: ${self:service}-${self:provider.stage}-portfolios
    STOCKS_TABLE: ${self:service}-${self:provider.stage}-stocks
    ETFS_TABLE: ${self:service}-${self:provider.stage}-etfs
    PROPERTIES_TABLE: ${self:service}-${self:provider.stage}-properties
    PRICE_HISTORY_TABLE: ${self:service}-${self:provider.stage}-price-history
    ALPHA_VANTAGE_API_KEY: ${env:ALPHA_VANTAGE_API_KEY, ''}
    FINNHUB_API_KEY: ${env:FINNHUB_API_KEY, ''}
  
  httpApi:
    cors:
      allowedOrigins:
        - https://d1s0t04ct1krwo.cloudfront.net
        - http://localhost:3000
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
  
  # Basic tagging
  tags:
    Application: portfoliosync
    Environment: ${opt:stage, 'dev'}
    Project: investment-platform
    Owner: ${env:OWNER_EMAIL, 'rtananthan@yahoo.com'}
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PORTFOLIOS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STOCKS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ETFS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROPERTIES_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRICE_HISTORY_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PORTFOLIOS_TABLE}/index/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STOCKS_TABLE}/index/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ETFS_TABLE}/index/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROPERTIES_TABLE}/index/*"
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - "arn:aws:secretsmanager:${self:provider.region}:*:secret:portfoliosync/*"

functions:
  getPortfolios:
    handler: functions/portfolio/get_portfolios.handler
    events:
      - httpApi:
          path: /portfolios
          method: get

  createPortfolio:
    handler: functions/portfolio/create_portfolio.handler
    events:
      - httpApi:
          path: /portfolios
          method: post

  getStocks:
    handler: functions/stocks/get_stocks.handler
    events:
      - httpApi:
          path: /portfolios/{portfolioId}/stocks
          method: get

  createStock:
    handler: functions/stocks/create_stock.handler
    events:
      - httpApi:
          path: /portfolios/{portfolioId}/stocks
          method: post

  updateStock:
    handler: functions/stocks/update_stock.handler
    events:
      - httpApi:
          path: /stocks/{stockId}
          method: put

  deleteStock:
    handler: functions/stocks/delete_stock.handler
    events:
      - httpApi:
          path: /stocks/{stockId}
          method: delete

  updateStockPrices:
    handler: functions/stocks/update_prices.handler
    timeout: 60  # Allow more time for multiple API calls
    events:
      - httpApi:
          path: /stocks/update-prices
          method: post

  # ETF Functions
  getETFs:
    handler: functions/etfs/get_etfs.handler
    events:
      - httpApi:
          path: /portfolios/{portfolioId}/etfs
          method: get

  createETF:
    handler: functions/etfs/create_etf.handler
    events:
      - httpApi:
          path: /portfolios/{portfolioId}/etfs
          method: post

  updateETF:
    handler: functions/etfs/update_etf.handler
    events:
      - httpApi:
          path: /etfs/{etfId}
          method: put

  deleteETF:
    handler: functions/etfs/delete_etf.handler
    events:
      - httpApi:
          path: /etfs/{etfId}
          method: delete

  # Property Functions
  getProperties:
    handler: functions/properties/get_properties.handler
    events:
      - httpApi:
          path: /portfolios/{portfolioId}/properties
          method: get

  createProperty:
    handler: functions/properties/create_property.handler
    events:
      - httpApi:
          path: /portfolios/{portfolioId}/properties
          method: post

  updateProperty:
    handler: functions/properties/update_property.handler
    events:
      - httpApi:
          path: /properties/{propertyId}
          method: put

  deleteProperty:
    handler: functions/properties/delete_property.handler
    events:
      - httpApi:
          path: /properties/{propertyId}
          method: delete

resources:
  Resources:
    PortfoliosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PORTFOLIOS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    StocksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.STOCKS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: portfolioId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: portfolioId-index
            KeySchema:
              - AttributeName: portfolioId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    ETFsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ETFS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: portfolioId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: portfolioId-index
            KeySchema:
              - AttributeName: portfolioId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    PropertiesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PROPERTIES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: portfolioId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: portfolioId-index
            KeySchema:
              - AttributeName: portfolioId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    PriceHistoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRICE_HISTORY_TABLE}
        AttributeDefinitions:
          - AttributeName: symbol
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: symbol
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    # Cost Monitoring and Alerts
    BillingAlarmTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-billing-alerts
        DisplayName: Investment Tracker Billing Alerts

    BillingAlarmSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        TopicArn: !Ref BillingAlarmTopic
        Endpoint: ${env:OWNER_EMAIL, 'rtananthan@yahoo.com'}

    # Billing alarm for $5 threshold
    BillingAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-billing-alarm
        AlarmDescription: Billing alarm for Investment Tracker application
        MetricName: EstimatedCharges
        Namespace: AWS/Billing
        Statistic: Maximum
        Period: 86400
        EvaluationPeriods: 1
        Threshold: 5.00
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: Currency
            Value: USD
        AlarmActions:
          - !Ref BillingAlarmTopic

    # Cost Budget
    CostBudget:
      Type: AWS::Budgets::Budget
      Properties:
        Budget:
          BudgetName: ${self:service}-${self:provider.stage}-monthly-budget
          BudgetLimit:
            Amount: 10.00
            Unit: USD
          TimeUnit: MONTHLY
          BudgetType: COST
        NotificationsWithSubscribers:
          - Notification:
              NotificationType: ACTUAL
              ComparisonOperator: GREATER_THAN
              Threshold: 80
              ThresholdType: PERCENTAGE
            Subscribers:
              - SubscriptionType: EMAIL
                Address: ${env:OWNER_EMAIL, 'rtananthan@yahoo.com'}
          - Notification:
              NotificationType: FORECASTED
              ComparisonOperator: GREATER_THAN
              Threshold: 100
              ThresholdType: PERCENTAGE
            Subscribers:
              - SubscriptionType: EMAIL
                Address: ${env:OWNER_EMAIL, 'rtananthan@yahoo.com'}

  Outputs:
    ApiGatewayUrl:
      Description: "API Gateway URL"
      Value: !Sub "https://${HttpApi}.execute-api.${self:provider.region}.amazonaws.com"

plugins:
  - serverless-python-requirements
  - serverless-offline